#!/usr/bin/env bash
# Slap
# Pipes command line output to Slack
#
# Based on Bash Boilerplate (Simple)
# https://github.com/alphabetum/bash-boilerplate

set -o nounset
set -o errexit
set -o errtrace
set -o pipefail

IFS=$'\n\t'

###############################################################################
# Environment
###############################################################################

# $_ME
#
# Set to the program's basename.
_ME=$(basename "${0}")
_TOKEN="${SLACK_LEGACY_TOKEN}"
_SLACK_TEXT_LIMIT=3900

###############################################################################
# Help
###############################################################################

# _print_help()
#
# Usage:
#   _print_help
#
# Print the program help information.
_print_help() {
  cat <<HEREDOC
   ___      _              _ __  
  / __|    | |    __ _    | '_ \ 
  \__ \    | |   / _\` |   | .__/ 
  |___/   _|_|_  \__,_|   |_|__  
_|"""""|_|"""""|_|"""""|_|"""""|
"'-0-0-'"'-0-0-'"'-0-0-'"'-0-0-'
Pipe command line output to Slack
Usage:
  ${_ME} [<channel>]
  ${_ME} -h | --help
Options:
  -h --help  Show this screen.
Example usages:
  ls -la | slap #general
  echo "message from cli" | slap @halil.ibrahim
HEREDOC
}

###############################################################################
# Program Functions
###############################################################################

_slap() {
  input=$(cat)
  
  if [ ${#input} -ge ${_SLACK_TEXT_LIMIT} ]; then
    for ((i = 0; i <= $((${#input} / ${_SLACK_TEXT_LIMIT})); i++)); do
      _slack_send "\`\`\`${input:$(( $i * ${_SLACK_TEXT_LIMIT} )):${_SLACK_TEXT_LIMIT}}\`\`\`" $1
    done
  else
    _slack_send "\`\`\`${input}\`\`\`" $1
  fi

  echo "slapped!"
}

_slack_send() {
  curl -s POST https://slack.com/api/chat.postMessage \
      --data-urlencode "token=${_TOKEN}" \
      --data-urlencode "text=$1" \
      --data-urlencode "channel=$2" \
      --data-urlencode "as_user=true" > /dev/null
}

###############################################################################
# Main
###############################################################################

# _main()
#
# Usage:
#   _main [<options>] [<arguments>]
#
# Description:
#   Entry point for the program, handling basic option parsing and dispatching.
_main() {
  # Avoid complex option parsing when only one program option is expected.
  if [[ "${1:?'channel is missing'}" =~ ^-h|--help$ ]]
  then
    _print_help
  else
    _slap "$@"
  fi
}

# Call `_main` after everything has been defined.
_main "$@"